#
# Builds run on every pull request and every push to the repo.
#

name: On_Pull_Request
on: [push, pull_request]

env:
    GITHUB_REPO: wlemkows/libuasync
    # use GitHub Container Registry as a repository of docker images
    GH_CR_ADDR:  ghcr.io
    DOCKER_REPO: ghcr.io/wlemkows/libuasync

    # use org's Private Access Token to log in to GitHub Container Registry
    GH_CR_USER:  ${{ secrets.GH_CR_USER }}
    GH_CR_PAT:   ${{ secrets.GH_CR_PAT }}
    DOC_UPDATE_GITHUB_TOKEN: ${{ secrets.DOC_UPDATE_GITHUB_TOKEN }}
    HOST_WORKDIR: /home/runner/work/libuasync/libuasync
    WORKDIR:      utils/docker

jobs:
  linux:
    name: Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        CONFIG: ["N=1 OS=ubuntu OS_VER=21.04 TYPE=normal CC=gcc   COVERAGE=1",
                 "N=2 OS=ubuntu OS_VER=21.04 TYPE=normal CC=clang PUSH_IMAGE=1",
                 "N=3 OS=fedora OS_VER=34    TYPE=normal CC=gcc   PUSH_IMAGE=1"]
                 #"N=4 OS=fedora OS_VER=34    TYPE=normal CC=clang AUTO_DOC_UPDATE=1"]
    steps:
       - name: Clone the git repo
         uses: actions/checkout@v1

       - name: Pull or rebuild the image
         run: cd $WORKDIR && ${{ matrix.CONFIG }} ./pull-or-rebuild-image.sh

       - name: Run the build
         run: cd $WORKDIR && ${{ matrix.CONFIG }} ./build.sh

       - name: Push the image
         run: cd $WORKDIR && source ./set-vars.sh && ${{ matrix.CONFIG }} /bin/bash -c "if [[ -f ${CI_FILE_PUSH_IMAGE_TO_REPO} ]]; then images/push-image.sh; fi"

  windows:
    name: Windows
    runs-on: windows-latest
    env:
      GENERATOR: "Visual Studio 16 2019"
      ARCH:      "x64"
      platform: x64
      msbuild: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Current\\Bin"
      # Platform Toolset for Visual Studio 2019
      platform_toolset: "v142"
      perl: "C:\\Strawberry\\perl\\bin"
    strategy:
      matrix:
        CONFIG: [Debug, Release]
    steps:
        - name: Update Path
          run: |
            echo "${env:msbuild}" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

        - name: Clone the git repo
          uses: actions/checkout@v2

        - name: Unshallow it
          run: git fetch --prune --unshallow

        - name: Configure
          run: cmake . -Bbuild
                  -G "${env:GENERATOR}"
                  -A "${env:ARCH}"
                  -DCMAKE_BUILD_TYPE="${{ matrix.BUILD_TYPE }}"
                  -DTESTS_USE_VALGRIND=OFF
                  -DDEVELOPER_MODE=ON

        - name: Build
          run: msbuild build/ALL_BUILD.vcxproj /property:Configuration=${{ matrix.BUILD_TYPE }} /verbosity:minimal /m

        - name: Tests
          #working-directory: build
          run: echo "Tests" #ctest -C ${{ matrix.BUILD_TYPE }} --output-on-failure --timeout "${env:TEST_TIMEOUT}"

        - name: Examples
          #working-directory: examples
          run: echo "Examples"
          #  cmake .
          #  msbuild